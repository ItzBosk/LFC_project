#
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings("all")
public class Pippo extends Lexer {
	public static final int EOF=-1;
	public static final int BASIC_TYPE=4;

 
 
 // $ANTLR 3.5.1 C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g 2022-10-31 21:53:30
 
 	package compilerPackage;
 
 
 import org.antlr.runtime.*;
 import java.util.Stack;
 import java.util.List;
 import java.util.ArrayList;
 
 @SuppressWarnings("all")
 public class SimpleJava2022Lexer extends Lexer {
 	public static final int EOF=-1;
 	public static final int ABSTRACT=4;
 	public static final int ADD=5;
 	public static final int AND=6;
 	public static final int AND_BIT=7;
 	public static final int ASSERT=8;
 	public static final int AT=9;
 	public static final int BASIC_TYPE=10;
 	public static final int BREAK=11;
 	public static final int BYTE=12;
 	public static final int CASE=13;
 	public static final int CATCH=14;
 	public static final int CHAR=15;
 	public static final int CL=16;
 	public static final int CLASS=17;
 	public static final int CM=18;
 	public static final int COMMENT=19;
 	public static final int CONTINUE=20;
 	public static final int DEFAULT=21;
 	public static final int DIGIT=22;
 	public static final int DIV=23;
 	public static final int DO=24;
 	public static final int DOT=25;
 	public static final int ELSE=26;
 	public static final int ENUM=27;
 	public static final int EQ=28;
 	public static final int ESC_SEQ=29;
 	public static final int EXPONENT=30;
 	public static final int EXTENDS=31;
 	public static final int FINAL=32;
 	public static final int FINALLY=33;
 	public static final int FLOAT=34;
 	public static final int FOR=35;
 	public static final int GE=36;
 	public static final int GT=37;
 	public static final int HEX_DIGIT=38;
 	public static final int ID=39;
 	public static final int IF=40;
 	public static final int IMPLEMENTS=41;
 	public static final int IMPORT=42;
 	public static final int INSTANCEOF=43;
 	public static final int INTEGER=44;
 	public static final int INTERFACE=45;
 	public static final int LB=46;
 	public static final int LBR=47;
 	public static final int LETTER=48;
 	public static final int LP=49;
 	public static final int LT=50;
 	public static final int MOD=51;
 	public static final int NATIVE=52;
 	public static final int NEQ=53;
 	public static final int NEW=54;
 	public static final int NOT=55;
 	public static final int OCTAL_ESC=56;
 	public static final int OR=57;
 	public static final int OR_BIT=58;
 	public static final int PACKAGE=59;
 	public static final int PRIVATE=60;
 	public static final int PROTECTED=61;
 	public static final int PUBLIC=62;
 	public static final int RB=63;
 	public static final int RBR=64;
 	public static final int RETURN=65;
 	public static final int RP=66;
 	public static final int SC=67;
 	public static final int STAR=68;
 	public static final int STATIC=69;
 	public static final int STRING=70;
 	public static final int SUB=71;
 	public static final int SUPER=72;
 	public static final int SWITCH=73;
 	public static final int SYNCHRONIZED=74;
 	public static final int THIS=75;
 	public static final int THROW=76;
 	public static final int THROWS=77;
 	public static final int TRANSIENT=78;
 	public static final int TRY=79;
 	public static final int UNICODE_ESC=80;
 	public static final int VOID=81;
 	public static final int VOLATILE=82;
 	public static final int WHILE=83;
 	public static final int WS=84;
 	public static final int XOR=85;
 
 	// delegates
 	// delegators
 	public Lexer[] getDelegates() {
 		return new Lexer[] {};
 	}
 
 	public SimpleJava2022Lexer() {} 
 	public SimpleJava2022Lexer(CharStream input) {
 		this(input, new RecognizerSharedState());
 	}
 	public SimpleJava2022Lexer(CharStream input, RecognizerSharedState state) {
 		super(input,state);
 	}
 	@Override public String getGrammarFileName() { return "C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g"; }
 
 	// $ANTLR start "EXPONENT"
 	public final void mEXPONENT() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:36:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:36:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
 			{
 			if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
 				input.consume();
 			}
 			else {
 				MismatchedSetException mse = new MismatchedSetException(null,input);
 				recover(mse);
 				throw mse;
 			}
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:36:22: ( '+' | '-' )?
 			int alt1=2;
 			int LA1_0 = input.LA(1);
 			if ( (LA1_0=='+'||LA1_0=='-') ) {
 				alt1=1;
 			}
 			switch (alt1) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 					{
 					if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 			}
 
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:36:33: ( '0' .. '9' )+
 			int cnt2=0;
 			loop2:
 			while (true) {
 				int alt2=2;
 				int LA2_0 = input.LA(1);
 				if ( ((LA2_0 >= '0' && LA2_0 <= '9')) ) {
 					alt2=1;
 				}
 
 				switch (alt2) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 					{
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 				default :
 					if ( cnt2 >= 1 ) break loop2;
 					EarlyExitException eee = new EarlyExitException(2, input);
 					throw eee;
 				}
 				cnt2++;
 			}
 
 			}
 
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "EXPONENT"
 
 	// $ANTLR start "HEX_DIGIT"
 	public final void mHEX_DIGIT() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:39:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 			{
 			if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
 				input.consume();
 			}
 			else {
 				MismatchedSetException mse = new MismatchedSetException(null,input);
 				recover(mse);
 				throw mse;
 			}
 			}
 
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "HEX_DIGIT"
 
 	// $ANTLR start "ESC_SEQ"
 	public final void mESC_SEQ() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:43:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
 			int alt3=3;
 			int LA3_0 = input.LA(1);
 			if ( (LA3_0=='\\') ) {
 				switch ( input.LA(2) ) {
 				case '\"':
 				case '\'':
 				case '\\':
 				case 'b':
 				case 'f':
 				case 'n':
 				case 'r':
 				case 't':
 					{
 					alt3=1;
 					}
 					break;
 				case 'u':
 					{
 					alt3=2;
 					}
 					break;
 				case '0':
 				case '1':
 				case '2':
 				case '3':
 				case '4':
 				case '5':
 				case '6':
 				case '7':
 					{
 					alt3=3;
 					}
 					break;
 				default:
 					int nvaeMark = input.mark();
 					try {
 						input.consume();
 						NoViableAltException nvae =
 							new NoViableAltException("", 3, 1, input);
 						throw nvae;
 					} finally {
 						input.rewind(nvaeMark);
 					}
 				}
 			}
 
 			else {
 				NoViableAltException nvae =
 					new NoViableAltException("", 3, 0, input);
 				throw nvae;
 			}
 
 			switch (alt3) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:43:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
 					{
 					match('\\'); 
 					if ( input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t' ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:44:9: UNICODE_ESC
 					{
 					mUNICODE_ESC(); 
 
 					}
 					break;
 				case 3 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:45:9: OCTAL_ESC
 					{
 					mOCTAL_ESC(); 
 
 					}
 					break;
 
 			}
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ESC_SEQ"
 
 	// $ANTLR start "OCTAL_ESC"
 	public final void mOCTAL_ESC() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:50:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
 			int alt4=3;
 			int LA4_0 = input.LA(1);
 			if ( (LA4_0=='\\') ) {
 				int LA4_1 = input.LA(2);
 				if ( ((LA4_1 >= '0' && LA4_1 <= '3')) ) {
 					int LA4_2 = input.LA(3);
 					if ( ((LA4_2 >= '0' && LA4_2 <= '7')) ) {
 						int LA4_4 = input.LA(4);
 						if ( ((LA4_4 >= '0' && LA4_4 <= '7')) ) {
 							alt4=1;
 						}
 
 						else {
 							alt4=2;
 						}
 
 					}
 
 					else {
 						alt4=3;
 					}
 
 				}
 				else if ( ((LA4_1 >= '4' && LA4_1 <= '7')) ) {
 					int LA4_3 = input.LA(3);
 					if ( ((LA4_3 >= '0' && LA4_3 <= '7')) ) {
 						alt4=2;
 					}
 
 					else {
 						alt4=3;
 					}
 
 				}
 
 				else {
 					int nvaeMark = input.mark();
 					try {
 						input.consume();
 						NoViableAltException nvae =
 							new NoViableAltException("", 4, 1, input);
 						throw nvae;
 					} finally {
 						input.rewind(nvaeMark);
 					}
 				}
 
 			}
 
 			else {
 				NoViableAltException nvae =
 					new NoViableAltException("", 4, 0, input);
 				throw nvae;
 			}
 
 			switch (alt4) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:50:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
 					{
 					match('\\'); 
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '3') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:51:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
 					{
 					match('\\'); 
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 				case 3 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:52:9: '\\\\' ( '0' .. '7' )
 					{
 					match('\\'); 
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 			}
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "OCTAL_ESC"
 
 	// $ANTLR start "UNICODE_ESC"
 	public final void mUNICODE_ESC() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:57:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:57:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
 			{
 			match('\\'); 
 			match('u'); 
 			mHEX_DIGIT(); 
 
 			mHEX_DIGIT(); 
 
 			mHEX_DIGIT(); 
 
 			mHEX_DIGIT(); 
 
 			}
 
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "UNICODE_ESC"
 
 	// $ANTLR start "LETTER"
 	public final void mLETTER() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:61:8: ( 'a' .. 'z' | 'A' .. 'Z' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 			{
 			if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
 				input.consume();
 			}
 			else {
 				MismatchedSetException mse = new MismatchedSetException(null,input);
 				recover(mse);
 				throw mse;
 			}
 			}
 
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "LETTER"
 
 	// $ANTLR start "DIGIT"
 	public final void mDIGIT() throws RecognitionException {
 		try {
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:63:7: ( '0' .. '9' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 			{
 			if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 				input.consume();
 			}
 			else {
 				MismatchedSetException mse = new MismatchedSetException(null,input);
 				recover(mse);
 				throw mse;
 			}
 			}
 
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "DIGIT"
 
 	// $ANTLR start "EQ"
 	public final void mEQ() throws RecognitionException {
 		try {
 			int _type = EQ;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:65:5: ( '=' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:65:7: '='
 			{
 			match('='); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "EQ"
 
 	// $ANTLR start "GT"
 	public final void mGT() throws RecognitionException {
 		try {
 			int _type = GT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:66:5: ( '>' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:66:7: '>'
 			{
 			match('>'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "GT"
 
 	// $ANTLR start "GE"
 	public final void mGE() throws RecognitionException {
 		try {
 			int _type = GE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:67:4: ( '>=' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:67:6: '>='
 			{
 			match(">="); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "GE"
 
 	// $ANTLR start "LT"
 	public final void mLT() throws RecognitionException {
 		try {
 			int _type = LT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:68:5: ( '<' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:68:7: '<'
 			{
 			match('<'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "LT"
 
 	// $ANTLR start "NEQ"
 	public final void mNEQ() throws RecognitionException {
 		try {
 			int _type = NEQ;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:69:5: ( '!=' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:69:7: '!='
 			{
 			match("!="); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "NEQ"
 
 	// $ANTLR start "AT"
 	public final void mAT() throws RecognitionException {
 		try {
 			int _type = AT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:72:4: ( '@' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:72:6: '@'
 			{
 			match('@'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "AT"
 
 	// $ANTLR start "CL"
 	public final void mCL() throws RecognitionException {
 		try {
 			int _type = CL;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:73:5: ( ':' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:73:7: ':'
 			{
 			match(':'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CL"
 
 	// $ANTLR start "CM"
 	public final void mCM() throws RecognitionException {
 		try {
 			int _type = CM;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:74:5: ( ',' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:74:7: ','
 			{
 			match(','); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CM"
 
 	// $ANTLR start "DOT"
 	public final void mDOT() throws RecognitionException {
 		try {
 			int _type = DOT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:75:5: ( '.' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:75:7: '.'
 			{
 			match('.'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "DOT"
 
 	// $ANTLR start "SC"
 	public final void mSC() throws RecognitionException {
 		try {
 			int _type = SC;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:76:5: ( ';' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:76:7: ';'
 			{
 			match(';'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "SC"
 
 	// $ANTLR start "LP"
 	public final void mLP() throws RecognitionException {
 		try {
 			int _type = LP;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:79:5: ( '(' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:79:7: '('
 			{
 			match('('); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "LP"
 
 	// $ANTLR start "RP"
 	public final void mRP() throws RecognitionException {
 		try {
 			int _type = RP;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:80:5: ( ')' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:80:7: ')'
 			{
 			match(')'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "RP"
 
 	// $ANTLR start "LB"
 	public final void mLB() throws RecognitionException {
 		try {
 			int _type = LB;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:81:4: ( '[' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:81:6: '['
 			{
 			match('['); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "LB"
 
 	// $ANTLR start "RB"
 	public final void mRB() throws RecognitionException {
 		try {
 			int _type = RB;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:82:4: ( ']' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:82:6: ']'
 			{
 			match(']'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "RB"
 
 	// $ANTLR start "LBR"
 	public final void mLBR() throws RecognitionException {
 		try {
 			int _type = LBR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:83:5: ( '{' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:83:7: '{'
 			{
 			match('{'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "LBR"
 
 	// $ANTLR start "RBR"
 	public final void mRBR() throws RecognitionException {
 		try {
 			int _type = RBR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:84:5: ( '}' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:84:7: '}'
 			{
 			match('}'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "RBR"
 
 	// $ANTLR start "ADD"
 	public final void mADD() throws RecognitionException {
 		try {
 			int _type = ADD;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:87:6: ( '+' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:87:8: '+'
 			{
 			match('+'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ADD"
 
 	// $ANTLR start "SUB"
 	public final void mSUB() throws RecognitionException {
 		try {
 			int _type = SUB;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:88:6: ( '-' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:88:8: '-'
 			{
 			match('-'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "SUB"
 
 	// $ANTLR start "STAR"
 	public final void mSTAR() throws RecognitionException {
 		try {
 			int _type = STAR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:89:6: ( '*' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:89:8: '*'
 			{
 			match('*'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "STAR"
 
 	// $ANTLR start "DIV"
 	public final void mDIV() throws RecognitionException {
 		try {
 			int _type = DIV;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:90:6: ( '/' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:90:8: '/'
 			{
 			match('/'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "DIV"
 
 	// $ANTLR start "MOD"
 	public final void mMOD() throws RecognitionException {
 		try {
 			int _type = MOD;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:91:6: ( '%' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:91:8: '%'
 			{
 			match('%'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "MOD"
 
 	// $ANTLR start "NOT"
 	public final void mNOT() throws RecognitionException {
 		try {
 			int _type = NOT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:94:7: ( '!' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:94:9: '!'
 			{
 			match('!'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "NOT"
 
 	// $ANTLR start "AND"
 	public final void mAND() throws RecognitionException {
 		try {
 			int _type = AND;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:95:7: ( '&&' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:95:9: '&&'
 			{
 			match("&&"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "AND"
 
 	// $ANTLR start "OR"
 	public final void mOR() throws RecognitionException {
 		try {
 			int _type = OR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:96:6: ( '||' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:96:8: '||'
 			{
 			match("||"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "OR"
 
 	// $ANTLR start "XOR"
 	public final void mXOR() throws RecognitionException {
 		try {
 			int _type = XOR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:97:7: ( '^' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:97:9: '^'
 			{
 			match('^'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "XOR"
 
 	// $ANTLR start "AND_BIT"
 	public final void mAND_BIT() throws RecognitionException {
 		try {
 			int _type = AND_BIT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:98:9: ( '&' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:98:11: '&'
 			{
 			match('&'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "AND_BIT"
 
 	// $ANTLR start "OR_BIT"
 	public final void mOR_BIT() throws RecognitionException {
 		try {
 			int _type = OR_BIT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:99:9: ( '|' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:99:11: '|'
 			{
 			match('|'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "OR_BIT"
 
 	// $ANTLR start "VOID"
 	public final void mVOID() throws RecognitionException {
 		try {
 			int _type = VOID;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:102:10: ( 'void' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:102:12: 'void'
 			{
 			match("void"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "VOID"
 
 	// $ANTLR start "BASIC_TYPE"
 	public final void mBASIC_TYPE() throws RecognitionException {
 		try {
 			int _type = BASIC_TYPE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:104:13: ( 'int' | 'long' | 'short' | 'float' | 'double' | 'boolean' | 'char' | 'String' )
 			int alt5=8;
 			switch ( input.LA(1) ) {
 			case 'i':
 				{
 				alt5=1;
 				}
 				break;
 			case 'l':
 				{
 				alt5=2;
 				}
 				break;
 			case 's':
 				{
 				alt5=3;
 				}
 				break;
 			case 'f':
 				{
 				alt5=4;
 				}
 				break;
 			case 'd':
 				{
 				alt5=5;
 				}
 				break;
 			case 'b':
 				{
 				alt5=6;
 				}
 				break;
 			case 'c':
 				{
 				alt5=7;
 				}
 				break;
 			case 'S':
 				{
 				alt5=8;
 				}
 				break;
 			default:
 				NoViableAltException nvae =
 					new NoViableAltException("", 5, 0, input);
 				throw nvae;
 			}
 			switch (alt5) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:104:15: 'int'
 					{
 					match("int"); 
 
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:104:24: 'long'
 					{
 					match("long"); 
 
 					}
 					break;
 				case 3 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:104:34: 'short'
 					{
 					match("short"); 
 
 					}
 					break;
 				case 4 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:105:8: 'float'
 					{
 					match("float"); 
 
 					}
 					break;
 				case 5 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:105:18: 'double'
 					{
 					match("double"); 
 
 					}
 					break;
 				case 6 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:105:29: 'boolean'
 					{
 					match("boolean"); 
 
 					}
 					break;
 				case 7 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:106:8: 'char'
 					{
 					match("char"); 
 
 					}
 					break;
 				case 8 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:106:17: 'String'
 					{
 					match("String"); 
 
 					}
 					break;
 
 			}
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "BASIC_TYPE"
 
 	// $ANTLR start "ABSTRACT"
 	public final void mABSTRACT() throws RecognitionException {
 		try {
 			int _type = ABSTRACT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:120:12: ( 'abstract' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:120:14: 'abstract'
 			{
 			match("abstract"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ABSTRACT"
 
 	// $ANTLR start "ASSERT"
 	public final void mASSERT() throws RecognitionException {
 		try {
 			int _type = ASSERT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:121:11: ( 'assert' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:121:13: 'assert'
 			{
 			match("assert"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ASSERT"
 
 	// $ANTLR start "BREAK"
 	public final void mBREAK() throws RecognitionException {
 		try {
 			int _type = BREAK;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:122:11: ( 'break' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:122:13: 'break'
 			{
 			match("break"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "BREAK"
 
 	// $ANTLR start "BYTE"
 	public final void mBYTE() throws RecognitionException {
 		try {
 			int _type = BYTE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:123:10: ( 'byte' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:123:12: 'byte'
 			{
 			match("byte"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "BYTE"
 
 	// $ANTLR start "CASE"
 	public final void mCASE() throws RecognitionException {
 		try {
 			int _type = CASE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:124:10: ( 'case' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:124:12: 'case'
 			{
 			match("case"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CASE"
 
 	// $ANTLR start "CATCH"
 	public final void mCATCH() throws RecognitionException {
 		try {
 			int _type = CATCH;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:125:11: ( 'catch' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:125:13: 'catch'
 			{
 			match("catch"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CATCH"
 
 	// $ANTLR start "CLASS"
 	public final void mCLASS() throws RecognitionException {
 		try {
 			int _type = CLASS;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:126:11: ( 'class' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:126:13: 'class'
 			{
 			match("class"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CLASS"
 
 	// $ANTLR start "CONTINUE"
 	public final void mCONTINUE() throws RecognitionException {
 		try {
 			int _type = CONTINUE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:127:12: ( 'continue' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:127:14: 'continue'
 			{
 			match("continue"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CONTINUE"
 
 	// $ANTLR start "DEFAULT"
 	public final void mDEFAULT() throws RecognitionException {
 		try {
 			int _type = DEFAULT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:128:12: ( 'default' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:128:14: 'default'
 			{
 			match("default"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "DEFAULT"
 
 	// $ANTLR start "DO"
 	public final void mDO() throws RecognitionException {
 		try {
 			int _type = DO;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:129:9: ( 'do' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:129:11: 'do'
 			{
 			match("do"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "DO"
 
 	// $ANTLR start "ELSE"
 	public final void mELSE() throws RecognitionException {
 		try {
 			int _type = ELSE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:130:10: ( 'else' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:130:12: 'else'
 			{
 			match("else"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ELSE"
 
 	// $ANTLR start "ENUM"
 	public final void mENUM() throws RecognitionException {
 		try {
 			int _type = ENUM;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:131:10: ( 'enum' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:131:12: 'enum'
 			{
 			match("enum"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ENUM"
 
 	// $ANTLR start "EXTENDS"
 	public final void mEXTENDS() throws RecognitionException {
 		try {
 			int _type = EXTENDS;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:132:12: ( 'extends' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:132:14: 'extends'
 			{
 			match("extends"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "EXTENDS"
 
 	// $ANTLR start "FINAL"
 	public final void mFINAL() throws RecognitionException {
 		try {
 			int _type = FINAL;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:133:11: ( 'final' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:133:13: 'final'
 			{
 			match("final"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "FINAL"
 
 	// $ANTLR start "FINALLY"
 	public final void mFINALLY() throws RecognitionException {
 		try {
 			int _type = FINALLY;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:134:12: ( 'finally' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:134:14: 'finally'
 			{
 			match("finally"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "FINALLY"
 
 	// $ANTLR start "FOR"
 	public final void mFOR() throws RecognitionException {
 		try {
 			int _type = FOR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:135:10: ( 'for' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:135:12: 'for'
 			{
 			match("for"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "FOR"
 
 	// $ANTLR start "IF"
 	public final void mIF() throws RecognitionException {
 		try {
 			int _type = IF;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:136:9: ( 'if' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:136:11: 'if'
 			{
 			match("if"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "IF"
 
 	// $ANTLR start "IMPLEMENTS"
 	public final void mIMPLEMENTS() throws RecognitionException {
 		try {
 			int _type = IMPLEMENTS;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:137:13: ( 'implements' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:137:15: 'implements'
 			{
 			match("implements"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "IMPLEMENTS"
 
 	// $ANTLR start "IMPORT"
 	public final void mIMPORT() throws RecognitionException {
 		try {
 			int _type = IMPORT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:138:11: ( 'import' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:138:13: 'import'
 			{
 			match("import"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "IMPORT"
 
 	// $ANTLR start "INSTANCEOF"
 	public final void mINSTANCEOF() throws RecognitionException {
 		try {
 			int _type = INSTANCEOF;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:139:13: ( 'instanceof' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:139:15: 'instanceof'
 			{
 			match("instanceof"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "INSTANCEOF"
 
 	// $ANTLR start "INTERFACE"
 	public final void mINTERFACE() throws RecognitionException {
 		try {
 			int _type = INTERFACE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:140:13: ( 'interface' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:140:15: 'interface'
 			{
 			match("interface"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "INTERFACE"
 
 	// $ANTLR start "NATIVE"
 	public final void mNATIVE() throws RecognitionException {
 		try {
 			int _type = NATIVE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:141:11: ( 'native' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:141:13: 'native'
 			{
 			match("native"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "NATIVE"
 
 	// $ANTLR start "NEW"
 	public final void mNEW() throws RecognitionException {
 		try {
 			int _type = NEW;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:142:10: ( 'new' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:142:12: 'new'
 			{
 			match("new"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "NEW"
 
 	// $ANTLR start "PACKAGE"
 	public final void mPACKAGE() throws RecognitionException {
 		try {
 			int _type = PACKAGE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:143:12: ( 'package' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:143:14: 'package'
 			{
 			match("package"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "PACKAGE"
 
 	// $ANTLR start "PRIVATE"
 	public final void mPRIVATE() throws RecognitionException {
 		try {
 			int _type = PRIVATE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:144:12: ( 'private' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:144:14: 'private'
 			{
 			match("private"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "PRIVATE"
 
 	// $ANTLR start "PROTECTED"
 	public final void mPROTECTED() throws RecognitionException {
 		try {
 			int _type = PROTECTED;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:145:13: ( 'protected' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:145:15: 'protected'
 			{
 			match("protected"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "PROTECTED"
 
 	// $ANTLR start "PUBLIC"
 	public final void mPUBLIC() throws RecognitionException {
 		try {
 			int _type = PUBLIC;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:146:11: ( 'public' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:146:13: 'public'
 			{
 			match("public"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "PUBLIC"
 
 	// $ANTLR start "RETURN"
 	public final void mRETURN() throws RecognitionException {
 		try {
 			int _type = RETURN;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:147:11: ( 'return' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:147:13: 'return'
 			{
 			match("return"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "RETURN"
 
 	// $ANTLR start "STATIC"
 	public final void mSTATIC() throws RecognitionException {
 		try {
 			int _type = STATIC;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:148:11: ( 'static' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:148:13: 'static'
 			{
 			match("static"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "STATIC"
 
 	// $ANTLR start "SUPER"
 	public final void mSUPER() throws RecognitionException {
 		try {
 			int _type = SUPER;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:149:11: ( 'super' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:149:13: 'super'
 			{
 			match("super"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "SUPER"
 
 	// $ANTLR start "SWITCH"
 	public final void mSWITCH() throws RecognitionException {
 		try {
 			int _type = SWITCH;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:150:11: ( 'switch' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:150:13: 'switch'
 			{
 			match("switch"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "SWITCH"
 
 	// $ANTLR start "SYNCHRONIZED"
 	public final void mSYNCHRONIZED() throws RecognitionException {
 		try {
 			int _type = SYNCHRONIZED;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:151:14: ( 'synchronized' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:151:16: 'synchronized'
 			{
 			match("synchronized"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "SYNCHRONIZED"
 
 	// $ANTLR start "THIS"
 	public final void mTHIS() throws RecognitionException {
 		try {
 			int _type = THIS;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:152:10: ( 'this' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:152:12: 'this'
 			{
 			match("this"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "THIS"
 
 	// $ANTLR start "THROW"
 	public final void mTHROW() throws RecognitionException {
 		try {
 			int _type = THROW;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:153:11: ( 'throw' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:153:13: 'throw'
 			{
 			match("throw"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "THROW"
 
 	// $ANTLR start "THROWS"
 	public final void mTHROWS() throws RecognitionException {
 		try {
 			int _type = THROWS;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:154:11: ( 'throws' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:154:13: 'throws'
 			{
 			match("throws"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "THROWS"
 
 	// $ANTLR start "TRANSIENT"
 	public final void mTRANSIENT() throws RecognitionException {
 		try {
 			int _type = TRANSIENT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:155:13: ( 'transient' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:155:15: 'transient'
 			{
 			match("transient"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "TRANSIENT"
 
 	// $ANTLR start "TRY"
 	public final void mTRY() throws RecognitionException {
 		try {
 			int _type = TRY;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:156:10: ( 'try' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:156:12: 'try'
 			{
 			match("try"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "TRY"
 
 	// $ANTLR start "VOLATILE"
 	public final void mVOLATILE() throws RecognitionException {
 		try {
 			int _type = VOLATILE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:157:12: ( 'volatile' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:157:14: 'volatile'
 			{
 			match("volatile"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "VOLATILE"
 
 	// $ANTLR start "WHILE"
 	public final void mWHILE() throws RecognitionException {
 		try {
 			int _type = WHILE;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:158:11: ( 'while' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:158:13: 'while'
 			{
 			match("while"); 
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "WHILE"
 
 	// $ANTLR start "ID"
 	public final void mID() throws RecognitionException {
 		try {
 			int _type = ID;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:161:5: ( ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:161:7: ( LETTER | '_' ) ( LETTER | DIGIT | '_' )*
 			{
 			if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
 				input.consume();
 			}
 			else {
 				MismatchedSetException mse = new MismatchedSetException(null,input);
 				recover(mse);
 				throw mse;
 			}
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:162:4: ( LETTER | DIGIT | '_' )*
 			loop6:
 			while (true) {
 				int alt6=2;
 				int LA6_0 = input.LA(1);
 				if ( ((LA6_0 >= '0' && LA6_0 <= '9')||(LA6_0 >= 'A' && LA6_0 <= 'Z')||LA6_0=='_'||(LA6_0 >= 'a' && LA6_0 <= 'z')) ) {
 					alt6=1;
 				}
 
 				switch (alt6) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 					{
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 				default :
 					break loop6;
 				}
 			}
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "ID"
 
 	// $ANTLR start "INTEGER"
 	public final void mINTEGER() throws RecognitionException {
 		try {
 			int _type = INTEGER;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:166:9: ( ( DIGIT )+ )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:166:11: ( DIGIT )+
 			{
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:166:11: ( DIGIT )+
 			int cnt7=0;
 			loop7:
 			while (true) {
 				int alt7=2;
 				int LA7_0 = input.LA(1);
 				if ( ((LA7_0 >= '0' && LA7_0 <= '9')) ) {
 					alt7=1;
 				}
 
 				switch (alt7) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 					{
 					if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 				default :
 					if ( cnt7 >= 1 ) break loop7;
 					EarlyExitException eee = new EarlyExitException(7, input);
 					throw eee;
 				}
 				cnt7++;
 			}
 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "INTEGER"
 
 	// $ANTLR start "FLOAT"
 	public final void mFLOAT() throws RecognitionException {
 		try {
 			int _type = FLOAT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:170:5: ( ( DIGIT )+ '.' ( DIGIT )* ( EXPONENT )? | '.' ( DIGIT )+ ( EXPONENT )? | ( DIGIT )+ EXPONENT )
 			int alt14=3;
 			alt14 = dfa14.predict(input);
 			switch (alt14) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:170:9: ( DIGIT )+ '.' ( DIGIT )* ( EXPONENT )?
 					{
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:170:9: ( DIGIT )+
 					int cnt8=0;
 					loop8:
 					while (true) {
 						int alt8=2;
 						int LA8_0 = input.LA(1);
 						if ( ((LA8_0 >= '0' && LA8_0 <= '9')) ) {
 							alt8=1;
 						}
 
 						switch (alt8) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 							{
 							if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 								input.consume();
 							}
 							else {
 								MismatchedSetException mse = new MismatchedSetException(null,input);
 								recover(mse);
 								throw mse;
 							}
 							}
 							break;
 
 						default :
 							if ( cnt8 >= 1 ) break loop8;
 							EarlyExitException eee = new EarlyExitException(8, input);
 							throw eee;
 						}
 						cnt8++;
 					}
 
 					match('.'); 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:170:20: ( DIGIT )*
 					loop9:
 					while (true) {
 						int alt9=2;
 						int LA9_0 = input.LA(1);
 						if ( ((LA9_0 >= '0' && LA9_0 <= '9')) ) {
 							alt9=1;
 						}
 
 						switch (alt9) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 							{
 							if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 								input.consume();
 							}
 							else {
 								MismatchedSetException mse = new MismatchedSetException(null,input);
 								recover(mse);
 								throw mse;
 							}
 							}
 							break;
 
 						default :
 							break loop9;
 						}
 					}
 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:170:27: ( EXPONENT )?
 					int alt10=2;
 					int LA10_0 = input.LA(1);
 					if ( (LA10_0=='E'||LA10_0=='e') ) {
 						alt10=1;
 					}
 					switch (alt10) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:170:27: EXPONENT
 							{
 							mEXPONENT(); 
 
 							}
 							break;
 
 					}
 
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:171:9: '.' ( DIGIT )+ ( EXPONENT )?
 					{
 					match('.'); 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:171:13: ( DIGIT )+
 					int cnt11=0;
 					loop11:
 					while (true) {
 						int alt11=2;
 						int LA11_0 = input.LA(1);
 						if ( ((LA11_0 >= '0' && LA11_0 <= '9')) ) {
 							alt11=1;
 						}
 
 						switch (alt11) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 							{
 							if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 								input.consume();
 							}
 							else {
 								MismatchedSetException mse = new MismatchedSetException(null,input);
 								recover(mse);
 								throw mse;
 							}
 							}
 							break;
 
 						default :
 							if ( cnt11 >= 1 ) break loop11;
 							EarlyExitException eee = new EarlyExitException(11, input);
 							throw eee;
 						}
 						cnt11++;
 					}
 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:171:20: ( EXPONENT )?
 					int alt12=2;
 					int LA12_0 = input.LA(1);
 					if ( (LA12_0=='E'||LA12_0=='e') ) {
 						alt12=1;
 					}
 					switch (alt12) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:171:20: EXPONENT
 							{
 							mEXPONENT(); 
 
 							}
 							break;
 
 					}
 
 					}
 					break;
 				case 3 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:172:9: ( DIGIT )+ EXPONENT
 					{
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:172:9: ( DIGIT )+
 					int cnt13=0;
 					loop13:
 					while (true) {
 						int alt13=2;
 						int LA13_0 = input.LA(1);
 						if ( ((LA13_0 >= '0' && LA13_0 <= '9')) ) {
 							alt13=1;
 						}
 
 						switch (alt13) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 							{
 							if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
 								input.consume();
 							}
 							else {
 								MismatchedSetException mse = new MismatchedSetException(null,input);
 								recover(mse);
 								throw mse;
 							}
 							}
 							break;
 
 						default :
 							if ( cnt13 >= 1 ) break loop13;
 							EarlyExitException eee = new EarlyExitException(13, input);
 							throw eee;
 						}
 						cnt13++;
 					}
 
 					mEXPONENT(); 
 
 					}
 					break;
 
 			}
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "FLOAT"
 
 	// $ANTLR start "COMMENT"
 	public final void mCOMMENT() throws RecognitionException {
 		try {
 			int _type = COMMENT;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:5: ( ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' ) )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:9: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
 			{
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:9: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
 			int alt18=2;
 			int LA18_0 = input.LA(1);
 			if ( (LA18_0=='/') ) {
 				int LA18_1 = input.LA(2);
 				if ( (LA18_1=='/') ) {
 					alt18=1;
 				}
 				else if ( (LA18_1=='*') ) {
 					alt18=2;
 				}
 
 				else {
 					int nvaeMark = input.mark();
 					try {
 						input.consume();
 						NoViableAltException nvae =
 							new NoViableAltException("", 18, 1, input);
 						throw nvae;
 					} finally {
 						input.rewind(nvaeMark);
 					}
 				}
 
 			}
 
 			else {
 				NoViableAltException nvae =
 					new NoViableAltException("", 18, 0, input);
 				throw nvae;
 			}
 
 			switch (alt18) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:10: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
 					{
 					match("//"); 
 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:15: (~ ( '\\n' | '\\r' ) )*
 					loop15:
 					while (true) {
 						int alt15=2;
 						int LA15_0 = input.LA(1);
 						if ( ((LA15_0 >= '\u0000' && LA15_0 <= '\t')||(LA15_0 >= '\u000B' && LA15_0 <= '\f')||(LA15_0 >= '\u000E' && LA15_0 <= '\uFFFF')) ) {
 							alt15=1;
 						}
 
 						switch (alt15) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 							{
 							if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\t')||(input.LA(1) >= '\u000B' && input.LA(1) <= '\f')||(input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFF') ) {
 								input.consume();
 							}
 							else {
 								MismatchedSetException mse = new MismatchedSetException(null,input);
 								recover(mse);
 								throw mse;
 							}
 							}
 							break;
 
 						default :
 							break loop15;
 						}
 					}
 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:29: ( '\\r' )?
 					int alt16=2;
 					int LA16_0 = input.LA(1);
 					if ( (LA16_0=='\r') ) {
 						alt16=1;
 					}
 					switch (alt16) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:176:29: '\\r'
 							{
 							match('\r'); 
 							}
 							break;
 
 					}
 
 					match('\n'); 
 					_channel=HIDDEN;
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:177:9: '/*' ( options {greedy=false; } : . )* '*/'
 					{
 					match("/*"); 
 
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:177:14: ( options {greedy=false; } : . )*
 					loop17:
 					while (true) {
 						int alt17=2;
 						int LA17_0 = input.LA(1);
 						if ( (LA17_0=='*') ) {
 							int LA17_1 = input.LA(2);
 							if ( (LA17_1=='/') ) {
 								alt17=2;
 							}
 							else if ( ((LA17_1 >= '\u0000' && LA17_1 <= '.')||(LA17_1 >= '0' && LA17_1 <= '\uFFFF')) ) {
 								alt17=1;
 							}
 
 						}
 						else if ( ((LA17_0 >= '\u0000' && LA17_0 <= ')')||(LA17_0 >= '+' && LA17_0 <= '\uFFFF')) ) {
 							alt17=1;
 						}
 
 						switch (alt17) {
 						case 1 :
 							// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:177:42: .
 							{
 							matchAny(); 
 							}
 							break;
 
 						default :
 							break loop17;
 						}
 					}
 
 					match("*/"); 
 
 					}
 					break;
 
 			}
 
 			_channel=HIDDEN;
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "COMMENT"
 
 	// $ANTLR start "WS"
 	public final void mWS() throws RecognitionException {
 		try {
 			int _type = WS;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:180:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:180:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
 			{
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:180:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
 			int cnt19=0;
 			loop19:
 			while (true) {
 				int alt19=2;
 				int LA19_0 = input.LA(1);
 				if ( ((LA19_0 >= '\t' && LA19_0 <= '\n')||LA19_0=='\r'||LA19_0==' ') ) {
 					alt19=1;
 				}
 
 				switch (alt19) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:
 					{
 					if ( (input.LA(1) >= '\t' && input.LA(1) <= '\n')||input.LA(1)=='\r'||input.LA(1)==' ' ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 				default :
 					if ( cnt19 >= 1 ) break loop19;
 					EarlyExitException eee = new EarlyExitException(19, input);
 					throw eee;
 				}
 				cnt19++;
 			}
 
 			_channel=HIDDEN;
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "WS"
 
 	// $ANTLR start "STRING"
 	public final void mSTRING() throws RecognitionException {
 		try {
 			int _type = STRING;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:188:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:188:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
 			{
 			match('\"'); 
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:188:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
 			loop20:
 			while (true) {
 				int alt20=3;
 				int LA20_0 = input.LA(1);
 				if ( (LA20_0=='\\') ) {
 					alt20=1;
 				}
 				else if ( ((LA20_0 >= '\u0000' && LA20_0 <= '!')||(LA20_0 >= '#' && LA20_0 <= '[')||(LA20_0 >= ']' && LA20_0 <= '\uFFFF')) ) {
 					alt20=2;
 				}
 
 				switch (alt20) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:188:14: ESC_SEQ
 					{
 					mESC_SEQ(); 
 
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:188:24: ~ ( '\\\\' | '\"' )
 					{
 					if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '!')||(input.LA(1) >= '#' && input.LA(1) <= '[')||(input.LA(1) >= ']' && input.LA(1) <= '\uFFFF') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 				default :
 					break loop20;
 				}
 			}
 
 			match('\"'); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "STRING"
 
 	// $ANTLR start "CHAR"
 	public final void mCHAR() throws RecognitionException {
 		try {
 			int _type = CHAR;
 			int _channel = DEFAULT_TOKEN_CHANNEL;
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:191:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:191:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
 			{
 			match('\''); 
 			// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:191:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
 			int alt21=2;
 			int LA21_0 = input.LA(1);
 			if ( (LA21_0=='\\') ) {
 				alt21=1;
 			}
 			else if ( ((LA21_0 >= '\u0000' && LA21_0 <= '&')||(LA21_0 >= '(' && LA21_0 <= '[')||(LA21_0 >= ']' && LA21_0 <= '\uFFFF')) ) {
 				alt21=2;
 			}
 
 			else {
 				NoViableAltException nvae =
 					new NoViableAltException("", 21, 0, input);
 				throw nvae;
 			}
 
 			switch (alt21) {
 				case 1 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:191:15: ESC_SEQ
 					{
 					mESC_SEQ(); 
 
 					}
 					break;
 				case 2 :
 					// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:191:25: ~ ( '\\'' | '\\\\' )
 					{
 					if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '&')||(input.LA(1) >= '(' && input.LA(1) <= '[')||(input.LA(1) >= ']' && input.LA(1) <= '\uFFFF') ) {
 						input.consume();
 					}
 					else {
 						MismatchedSetException mse = new MismatchedSetException(null,input);
 						recover(mse);
 						throw mse;
 					}
 					}
 					break;
 
 			}
 
 			match('\''); 
 			}
 
 			state.type = _type;
 			state.channel = _channel;
 		}
 		finally {
 			// do for sure before leaving
 		}
 	}
 	// $ANTLR end "CHAR"
 
 	@Override
 	public void mTokens() throws RecognitionException {
 		// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:8: ( EQ | GT | GE | LT | NEQ | AT | CL | CM | DOT | SC | LP | RP | LB | RB | LBR | RBR | ADD | SUB | STAR | DIV | MOD | NOT | AND | OR | XOR | AND_BIT | OR_BIT | VOID | BASIC_TYPE | ABSTRACT | ASSERT | BREAK | BYTE | CASE | CATCH | CLASS | CONTINUE | DEFAULT | DO | ELSE | ENUM | EXTENDS | FINAL | FINALLY | FOR | IF | IMPLEMENTS | IMPORT | INSTANCEOF | INTERFACE | NATIVE | NEW | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | STATIC | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRY | VOLATILE | WHILE | ID | INTEGER | FLOAT | COMMENT | WS | STRING | CHAR )
 		int alt22=75;
 		alt22 = dfa22.predict(input);
 		switch (alt22) {
 			case 1 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:10: EQ
 				{
 				mEQ(); 
 
 				}
 				break;
 			case 2 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:13: GT
 				{
 				mGT(); 
 
 				}
 				break;
 			case 3 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:16: GE
 				{
 				mGE(); 
 
 				}
 				break;
 			case 4 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:19: LT
 				{
 				mLT(); 
 
 				}
 				break;
 			case 5 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:22: NEQ
 				{
 				mNEQ(); 
 
 				}
 				break;
 			case 6 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:26: AT
 				{
 				mAT(); 
 
 				}
 				break;
 			case 7 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:29: CL
 				{
 				mCL(); 
 
 				}
 				break;
 			case 8 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:32: CM
 				{
 				mCM(); 
 
 				}
 				break;
 			case 9 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:35: DOT
 				{
 				mDOT(); 
 
 				}
 				break;
 			case 10 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:39: SC
 				{
 				mSC(); 
 
 				}
 				break;
 			case 11 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:42: LP
 				{
 				mLP(); 
 
 				}
 				break;
 			case 12 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:45: RP
 				{
 				mRP(); 
 
 				}
 				break;
 			case 13 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:48: LB
 				{
 				mLB(); 
 
 				}
 				break;
 			case 14 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:51: RB
 				{
 				mRB(); 
 
 				}
 				break;
 			case 15 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:54: LBR
 				{
 				mLBR(); 
 
 				}
 				break;
 			case 16 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:58: RBR
 				{
 				mRBR(); 
 
 				}
 				break;
 			case 17 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:62: ADD
 				{
 				mADD(); 
 
 				}
 				break;
 			case 18 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:66: SUB
 				{
 				mSUB(); 
 
 				}
 				break;
 			case 19 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:70: STAR
 				{
 				mSTAR(); 
 
 				}
 				break;
 			case 20 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:75: DIV
 				{
 				mDIV(); 
 
 				}
 				break;
 			case 21 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:79: MOD
 				{
 				mMOD(); 
 
 				}
 				break;
 			case 22 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:83: NOT
 				{
 				mNOT(); 
 
 				}
 				break;
 			case 23 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:87: AND
 				{
 				mAND(); 
 
 				}
 				break;
 			case 24 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:91: OR
 				{
 				mOR(); 
 
 				}
 				break;
 			case 25 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:94: XOR
 				{
 				mXOR(); 
 
 				}
 				break;
 			case 26 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:98: AND_BIT
 				{
 				mAND_BIT(); 
 
 				}
 				break;
 			case 27 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:106: OR_BIT
 				{
 				mOR_BIT(); 
 
 				}
 				break;
 			case 28 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:113: VOID
 				{
 				mVOID(); 
 
 				}
 				break;
 			case 29 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:118: BASIC_TYPE
 				{
 				mBASIC_TYPE(); 
 
 				}
 				break;
 			case 30 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:129: ABSTRACT
 				{
 				mABSTRACT(); 
 
 				}
 				break;
 			case 31 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:138: ASSERT
 				{
 				mASSERT(); 
 
 				}
 				break;
 			case 32 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:145: BREAK
 				{
 				mBREAK(); 
 
 				}
 				break;
 			case 33 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:151: BYTE
 				{
 				mBYTE(); 
 
 				}
 				break;
 			case 34 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:156: CASE
 				{
 				mCASE(); 
 
 				}
 				break;
 			case 35 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:161: CATCH
 				{
 				mCATCH(); 
 
 				}
 				break;
 			case 36 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:167: CLASS
 				{
 				mCLASS(); 
 
 				}
 				break;
 			case 37 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:173: CONTINUE
 				{
 				mCONTINUE(); 
 
 				}
 				break;
 			case 38 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:182: DEFAULT
 				{
 				mDEFAULT(); 
 
 				}
 				break;
 			case 39 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:190: DO
 				{
 				mDO(); 
 
 				}
 				break;
 			case 40 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:193: ELSE
 				{
 				mELSE(); 
 
 				}
 				break;
 			case 41 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:198: ENUM
 				{
 				mENUM(); 
 
 				}
 				break;
 			case 42 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:203: EXTENDS
 				{
 				mEXTENDS(); 
 
 				}
 				break;
 			case 43 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:211: FINAL
 				{
 				mFINAL(); 
 
 				}
 				break;
 			case 44 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:217: FINALLY
 				{
 				mFINALLY(); 
 
 				}
 				break;
 			case 45 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:225: FOR
 				{
 				mFOR(); 
 
 				}
 				break;
 			case 46 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:229: IF
 				{
 				mIF(); 
 
 				}
 				break;
 			case 47 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:232: IMPLEMENTS
 				{
 				mIMPLEMENTS(); 
 
 				}
 				break;
 			case 48 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:243: IMPORT
 				{
 				mIMPORT(); 
 
 				}
 				break;
 			case 49 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:250: INSTANCEOF
 				{
 				mINSTANCEOF(); 
 
 				}
 				break;
 			case 50 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:261: INTERFACE
 				{
 				mINTERFACE(); 
 
 				}
 				break;
 			case 51 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:271: NATIVE
 				{
 				mNATIVE(); 
 
 				}
 				break;
 			case 52 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:278: NEW
 				{
 				mNEW(); 
 
 				}
 				break;
 			case 53 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:282: PACKAGE
 				{
 				mPACKAGE(); 
 
 				}
 				break;
 			case 54 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:290: PRIVATE
 				{
 				mPRIVATE(); 
 
 				}
 				break;
 			case 55 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:298: PROTECTED
 				{
 				mPROTECTED(); 
 
 				}
 				break;
 			case 56 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:308: PUBLIC
 				{
 				mPUBLIC(); 
 
 				}
 				break;
 			case 57 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:315: RETURN
 				{
 				mRETURN(); 
 
 				}
 				break;
 			case 58 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:322: STATIC
 				{
 				mSTATIC(); 
 
 				}
 				break;
 			case 59 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:329: SUPER
 				{
 				mSUPER(); 
 
 				}
 				break;
 			case 60 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:335: SWITCH
 				{
 				mSWITCH(); 
 
 				}
 				break;
 			case 61 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:342: SYNCHRONIZED
 				{
 				mSYNCHRONIZED(); 
 
 				}
 				break;
 			case 62 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:355: THIS
 				{
 				mTHIS(); 
 
 				}
 				break;
 			case 63 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:360: THROW
 				{
 				mTHROW(); 
 
 				}
 				break;
 			case 64 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:366: THROWS
 				{
 				mTHROWS(); 
 
 				}
 				break;
 			case 65 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:373: TRANSIENT
 				{
 				mTRANSIENT(); 
 
 				}
 				break;
 			case 66 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:383: TRY
 				{
 				mTRY(); 
 
 				}
 				break;
 			case 67 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:387: VOLATILE
 				{
 				mVOLATILE(); 
 
 				}
 				break;
 			case 68 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:396: WHILE
 				{
 				mWHILE(); 
 
 				}
 				break;
 			case 69 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:402: ID
 				{
 				mID(); 
 
 				}
 				break;
 			case 70 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:405: INTEGER
 				{
 				mINTEGER(); 
 
 				}
 				break;
 			case 71 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:413: FLOAT
 				{
 				mFLOAT(); 
 
 				}
 				break;
 			case 72 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:419: COMMENT
 				{
 				mCOMMENT(); 
 
 				}
 				break;
 			case 73 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:427: WS
 				{
 				mWS(); 
 
 				}
 				break;
 			case 74 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:430: STRING
 				{
 				mSTRING(); 
 
 				}
 				break;
 			case 75 :
 				// C:\\Users\\Unibg\\Documents\\Eclipse\\WS Corso LFC 2021\\SimpleJava2022\\src\\compilerPackage\\SimpleJava2022.g:1:437: CHAR
 				{
 				mCHAR(); 
 
 				}
 				break;
 
 		}
 	}
 
 
 	protected DFA14 dfa14 = new DFA14(this);
 	protected DFA22 dfa22 = new DFA22(this);
 	static final String DFA14_eotS =
 		"\5\uffff";
 	static final String DFA14_eofS =
 		"\5\uffff";
 	static final String DFA14_minS =
 		"\2\56\3\uffff";
 	static final String DFA14_maxS =
 		"\1\71\1\145\3\uffff";
 	static final String DFA14_acceptS =
 		"\2\uffff\1\2\1\1\1\3";
 	static final String DFA14_specialS =
 		"\5\uffff}>";
 	static final String[] DFA14_transitionS = {
 			"\1\2\1\uffff\12\1",
 			"\1\3\1\uffff\12\1\13\uffff\1\4\37\uffff\1\4",
 			"",
 			"",
 			""
 	};
 
 	static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
 	static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
 	static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
 	static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
 	static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
 	static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
 	static final short[][] DFA14_transition;
 
 	static {
 		int numStates = DFA14_transitionS.length;
 		DFA14_transition = new short[numStates][];
 		for (int i=0; i<numStates; i++) {
 			DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
 		}
 	}
 
 	protected class DFA14 extends DFA {
 
 		public DFA14(BaseRecognizer recognizer) {
 			this.recognizer = recognizer;
 			this.decisionNumber = 14;
 			this.eot = DFA14_eot;
 			this.eof = DFA14_eof;
 			this.min = DFA14_min;
 			this.max = DFA14_max;
 			this.accept = DFA14_accept;
 			this.special = DFA14_special;
 			this.transition = DFA14_transition;
 		}
 		@Override
 		public String getDescription() {
 			return "169:1: FLOAT : ( ( DIGIT )+ '.' ( DIGIT )* ( EXPONENT )? | '.' ( DIGIT )+ ( EXPONENT )? | ( DIGIT )+ EXPONENT );";
 		}
 	}
 
 	static final String DFA22_eotS =
 		"\2\uffff\1\56\1\uffff\1\60\3\uffff\1\61\12\uffff\1\64\1\uffff\1\66\1\70"+
 		"\1\uffff\20\50\1\uffff\1\136\17\uffff\2\50\1\143\12\50\1\157\27\50\1\uffff"+
 		"\2\50\1\u008e\1\50\1\uffff\11\50\1\u009a\1\50\1\uffff\20\50\1\u00ac\10"+
 		"\50\1\u00b5\1\50\1\u00b7\2\50\1\uffff\3\50\1\u008e\7\50\1\uffff\4\50\1"+
 		"\u00c8\1\u008e\1\u00c9\6\50\1\u00d0\1\u00d1\2\50\1\uffff\5\50\1\u00d9"+
 		"\2\50\1\uffff\1\50\1\uffff\5\50\1\u008e\1\50\1\u00e3\2\50\1\u008e\1\u00e7"+
 		"\3\50\1\u00eb\2\uffff\1\u00ec\1\u00ed\4\50\2\uffff\7\50\1\uffff\1\u00fa"+
 		"\1\50\1\u00fc\4\50\1\u0101\1\u0102\1\uffff\1\u0103\2\50\1\uffff\1\u008e"+
 		"\2\50\3\uffff\1\50\1\u008e\1\50\1\u010a\1\50\1\u010c\3\50\1\u0110\1\u0111"+
 		"\1\u0112\1\uffff\1\50\1\uffff\4\50\3\uffff\1\50\1\u0119\1\u011a\1\u008e"+
 		"\2\50\1\uffff\1\u011d\1\uffff\1\u011e\1\u011f\1\50\3\uffff\1\50\1\u0122"+
 		"\4\50\2\uffff\1\u0127\1\u0128\3\uffff\2\50\1\uffff\1\u012b\3\50\2\uffff"+
 		"\1\u012f\1\u0130\1\uffff\1\u0131\1\u0132\1\50\4\uffff\1\50\1\u0135\1\uffff";
 	static final String DFA22_eofS =
 		"\u0136\uffff";
 	static final String DFA22_minS =
 		"\1\11\1\uffff\1\75\1\uffff\1\75\3\uffff\1\60\12\uffff\1\52\1\uffff\1\46"+
 		"\1\174\1\uffff\1\157\1\146\1\157\1\150\1\151\1\145\1\157\1\141\1\164\1"+
 		"\142\1\154\2\141\1\145\2\150\1\uffff\1\56\17\uffff\1\151\1\163\1\60\1"+
 		"\160\1\156\1\157\1\141\1\160\1\151\1\156\1\157\1\156\1\162\1\60\1\146"+
 		"\1\157\1\145\1\164\1\141\1\163\1\141\1\156\1\162\3\163\1\165\2\164\1\167"+
 		"\1\143\1\151\1\142\1\164\1\151\1\141\1\151\1\uffff\1\144\1\141\1\60\1"+
 		"\164\1\uffff\1\154\1\147\1\162\1\164\1\145\1\164\1\143\2\141\1\60\1\142"+
 		"\1\uffff\1\141\1\154\1\141\1\145\1\162\1\145\1\143\1\163\1\164\1\151\1"+
 		"\164\2\145\1\155\1\145\1\151\1\60\1\153\1\166\1\164\1\154\1\165\1\163"+
 		"\1\157\1\156\1\60\1\154\1\60\1\164\1\162\1\uffff\1\141\1\145\1\162\1\60"+
 		"\1\164\1\151\1\162\1\143\1\150\1\164\1\154\1\uffff\1\154\1\165\1\145\1"+
 		"\153\3\60\1\150\1\163\1\151\1\156\2\162\2\60\1\156\1\166\1\uffff\2\141"+
 		"\1\145\1\151\1\162\1\60\1\167\1\163\1\uffff\1\145\1\uffff\1\151\1\146"+
 		"\1\156\1\155\1\164\1\60\1\143\1\60\1\150\1\162\2\60\1\145\1\154\1\141"+
 		"\1\60\2\uffff\2\60\1\156\1\147\1\141\1\164\2\uffff\1\144\1\145\1\147\1"+
 		"\164\2\143\1\156\1\uffff\1\60\1\151\1\60\1\154\1\141\1\143\1\145\2\60"+
 		"\1\uffff\1\60\1\157\1\171\1\uffff\1\60\1\164\1\156\3\uffff\1\165\1\60"+
 		"\1\143\1\60\1\163\1\60\2\145\1\164\3\60\1\uffff\1\145\1\uffff\1\145\1"+
 		"\143\1\145\1\156\3\uffff\1\156\3\60\1\145\1\164\1\uffff\1\60\1\uffff\2"+
 		"\60\1\145\3\uffff\1\156\1\60\1\145\1\157\1\164\1\151\2\uffff\2\60\3\uffff"+
 		"\1\144\1\164\1\uffff\1\60\1\146\1\163\1\172\2\uffff\2\60\1\uffff\2\60"+
 		"\1\145\4\uffff\1\144\1\60\1\uffff";
 	static final String DFA22_maxS =
 		"\1\175\1\uffff\1\75\1\uffff\1\75\3\uffff\1\71\12\uffff\1\57\1\uffff\1"+
 		"\46\1\174\1\uffff\1\157\1\156\1\157\1\171\2\157\1\171\1\157\1\164\1\163"+
 		"\1\170\1\145\1\165\1\145\1\162\1\150\1\uffff\1\145\17\uffff\1\154\1\164"+
 		"\1\172\1\160\1\156\1\157\1\141\1\160\1\151\1\156\1\157\1\156\1\162\1\172"+
 		"\1\146\1\157\1\145\1\164\1\141\1\164\1\141\1\156\1\162\3\163\1\165\2\164"+
 		"\1\167\1\143\1\157\1\142\1\164\1\162\1\171\1\151\1\uffff\1\144\1\141\1"+
 		"\172\1\164\1\uffff\1\157\1\147\1\162\1\164\1\145\1\164\1\143\2\141\1\172"+
 		"\1\142\1\uffff\1\141\1\154\1\141\1\145\1\162\1\145\1\143\1\163\1\164\1"+
 		"\151\1\164\2\145\1\155\1\145\1\151\1\172\1\153\1\166\1\164\1\154\1\165"+
 		"\1\163\1\157\1\156\1\172\1\154\1\172\1\164\1\162\1\uffff\1\141\1\145\1"+
 		"\162\1\172\1\164\1\151\1\162\1\143\1\150\1\164\1\154\1\uffff\1\154\1\165"+
 		"\1\145\1\153\3\172\1\150\1\163\1\151\1\156\2\162\2\172\1\156\1\166\1\uffff"+
 		"\2\141\1\145\1\151\1\162\1\172\1\167\1\163\1\uffff\1\145\1\uffff\1\151"+
 		"\1\146\1\156\1\155\1\164\1\172\1\143\1\172\1\150\1\162\2\172\1\145\1\154"+
 		"\1\141\1\172\2\uffff\2\172\1\156\1\147\1\141\1\164\2\uffff\1\144\1\145"+
 		"\1\147\1\164\2\143\1\156\1\uffff\1\172\1\151\1\172\1\154\1\141\1\143\1"+
 		"\145\2\172\1\uffff\1\172\1\157\1\171\1\uffff\1\172\1\164\1\156\3\uffff"+
 		"\1\165\1\172\1\143\1\172\1\163\1\172\2\145\1\164\3\172\1\uffff\1\145\1"+
 		"\uffff\1\145\1\143\1\145\1\156\3\uffff\1\156\3\172\1\145\1\164\1\uffff"+
 		"\1\172\1\uffff\2\172\1\145\3\uffff\1\156\1\172\1\145\1\157\1\164\1\151"+
 		"\2\uffff\2\172\3\uffff\1\144\1\164\1\uffff\1\172\1\146\1\163\1\172\2\uffff"+
 		"\2\172\1\uffff\2\172\1\145\4\uffff\1\144\1\172\1\uffff";
 	static final String DFA22_acceptS =
 		"\1\uffff\1\1\1\uffff\1\4\1\uffff\1\6\1\7\1\10\1\uffff\1\12\1\13\1\14\1"+
 		"\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\25\2\uffff\1\31\20\uffff\1"+
 		"\105\1\uffff\1\111\1\112\1\113\1\3\1\2\1\5\1\26\1\11\1\107\1\110\1\24"+
 		"\1\27\1\32\1\30\1\33\45\uffff\1\106\4\uffff\1\56\13\uffff\1\47\36\uffff"+
 		"\1\35\13\uffff\1\55\21\uffff\1\64\10\uffff\1\102\1\uffff\1\34\20\uffff"+
 		"\1\41\1\42\6\uffff\1\50\1\51\7\uffff\1\76\11\uffff\1\73\3\uffff\1\53\3"+
 		"\uffff\1\40\1\43\1\44\14\uffff\1\77\1\uffff\1\104\4\uffff\1\60\1\72\1"+
 		"\74\6\uffff\1\37\1\uffff\1\63\3\uffff\1\70\1\71\1\100\6\uffff\1\54\1\46"+
 		"\2\uffff\1\52\1\65\1\66\2\uffff\1\103\4\uffff\1\45\1\36\2\uffff\1\62\3"+
 		"\uffff\1\67\1\101\1\61\1\57\2\uffff\1\75";
 	static final String DFA22_specialS =
 		"\u0136\uffff}>";
 	static final String[] DFA22_transitionS = {
 			"\2\52\2\uffff\1\52\22\uffff\1\52\1\4\1\53\2\uffff\1\24\1\25\1\54\1\12"+
 			"\1\13\1\22\1\20\1\7\1\21\1\10\1\23\12\51\1\6\1\11\1\3\1\1\1\2\1\uffff"+
 			"\1\5\22\50\1\40\7\50\1\14\1\uffff\1\15\1\27\1\50\1\uffff\1\41\1\36\1"+
 			"\37\1\35\1\42\1\34\2\50\1\31\2\50\1\32\1\50\1\43\1\50\1\44\1\50\1\45"+
 			"\1\33\1\46\1\50\1\30\1\47\3\50\1\16\1\26\1\17",
 			"",
 			"\1\55",
 			"",
 			"\1\57",
 			"",
 			"",
 			"",
 			"\12\62",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"\1\63\4\uffff\1\63",
 			"",
 			"\1\65",
 			"\1\67",
 			"",
 			"\1\71",
 			"\1\73\6\uffff\1\74\1\72",
 			"\1\75",
 			"\1\76\13\uffff\1\77\1\100\1\uffff\1\101\1\uffff\1\102",
 			"\1\104\2\uffff\1\103\2\uffff\1\105",
 			"\1\107\11\uffff\1\106",
 			"\1\110\2\uffff\1\111\6\uffff\1\112",
 			"\1\114\6\uffff\1\113\3\uffff\1\115\2\uffff\1\116",
 			"\1\117",
 			"\1\120\20\uffff\1\121",
 			"\1\122\1\uffff\1\123\11\uffff\1\124",
 			"\1\125\3\uffff\1\126",
 			"\1\127\20\uffff\1\130\2\uffff\1\131",
 			"\1\132",
 			"\1\133\11\uffff\1\134",
 			"\1\135",
 			"",
 			"\1\62\1\uffff\12\51\13\uffff\1\62\37\uffff\1\62",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"",
 			"\1\137\2\uffff\1\140",
 			"\1\142\1\141",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\144",
 			"\1\145",
 			"\1\146",
 			"\1\147",
 			"\1\150",
 			"\1\151",
 			"\1\152",
 			"\1\153",
 			"\1\154",
 			"\1\155",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\24\50\1\156\5\50",
 			"\1\160",
 			"\1\161",
 			"\1\162",
 			"\1\163",
 			"\1\164",
 			"\1\165\1\166",
 			"\1\167",
 			"\1\170",
 			"\1\171",
 			"\1\172",
 			"\1\173",
 			"\1\174",
 			"\1\175",
 			"\1\176",
 			"\1\177",
 			"\1\u0080",
 			"\1\u0081",
 			"\1\u0082\5\uffff\1\u0083",
 			"\1\u0084",
 			"\1\u0085",
 			"\1\u0086\10\uffff\1\u0087",
 			"\1\u0088\27\uffff\1\u0089",
 			"\1\u008a",
 			"",
 			"\1\u008b",
 			"\1\u008c",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\4\50\1\u008d\25\50",
 			"\1\u008f",
 			"",
 			"\1\u0090\2\uffff\1\u0091",
 			"\1\u0092",
 			"\1\u0093",
 			"\1\u0094",
 			"\1\u0095",
 			"\1\u0096",
 			"\1\u0097",
 			"\1\u0098",
 			"\1\u0099",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u009b",
 			"",
 			"\1\u009c",
 			"\1\u009d",
 			"\1\u009e",
 			"\1\u009f",
 			"\1\u00a0",
 			"\1\u00a1",
 			"\1\u00a2",
 			"\1\u00a3",
 			"\1\u00a4",
 			"\1\u00a5",
 			"\1\u00a6",
 			"\1\u00a7",
 			"\1\u00a8",
 			"\1\u00a9",
 			"\1\u00aa",
 			"\1\u00ab",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00ad",
 			"\1\u00ae",
 			"\1\u00af",
 			"\1\u00b0",
 			"\1\u00b1",
 			"\1\u00b2",
 			"\1\u00b3",
 			"\1\u00b4",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00b6",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00b8",
 			"\1\u00b9",
 			"",
 			"\1\u00ba",
 			"\1\u00bb",
 			"\1\u00bc",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00bd",
 			"\1\u00be",
 			"\1\u00bf",
 			"\1\u00c0",
 			"\1\u00c1",
 			"\1\u00c2",
 			"\1\u00c3",
 			"",
 			"\1\u00c4",
 			"\1\u00c5",
 			"\1\u00c6",
 			"\1\u00c7",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00ca",
 			"\1\u00cb",
 			"\1\u00cc",
 			"\1\u00cd",
 			"\1\u00ce",
 			"\1\u00cf",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00d2",
 			"\1\u00d3",
 			"",
 			"\1\u00d4",
 			"\1\u00d5",
 			"\1\u00d6",
 			"\1\u00d7",
 			"\1\u00d8",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00da",
 			"\1\u00db",
 			"",
 			"\1\u00dc",
 			"",
 			"\1\u00dd",
 			"\1\u00de",
 			"\1\u00df",
 			"\1\u00e0",
 			"\1\u00e1",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00e2",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00e4",
 			"\1\u00e5",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\13\50\1\u00e6\16\50",
 			"\1\u00e8",
 			"\1\u00e9",
 			"\1\u00ea",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00ee",
 			"\1\u00ef",
 			"\1\u00f0",
 			"\1\u00f1",
 			"",
 			"",
 			"\1\u00f2",
 			"\1\u00f3",
 			"\1\u00f4",
 			"\1\u00f5",
 			"\1\u00f6",
 			"\1\u00f7",
 			"\1\u00f8",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\22\50\1\u00f9\7\50",
 			"\1\u00fb",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u00fd",
 			"\1\u00fe",
 			"\1\u00ff",
 			"\1\u0100",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u0104",
 			"\1\u0105",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u0106",
 			"\1\u0107",
 			"",
 			"",
 			"",
 			"\1\u0108",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u0109",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u010b",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u010d",
 			"\1\u010e",
 			"\1\u010f",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"",
 			"\1\u0113",
 			"",
 			"\1\u0114",
 			"\1\u0115",
 			"\1\u0116",
 			"\1\u0117",
 			"",
 			"",
 			"",
 			"\1\u0118",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u011b",
 			"\1\u011c",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u0120",
 			"",
 			"",
 			"",
 			"\1\u0121",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u0123",
 			"\1\u0124",
 			"\1\u0125",
 			"\1\u0126",
 			"",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"",
 			"",
 			"",
 			"\1\u0129",
 			"\1\u012a",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u012c",
 			"\1\u012d",
 			"\1\u012e",
 			"",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			"\1\u0133",
 			"",
 			"",
 			"",
 			"",
 			"\1\u0134",
 			"\12\50\7\uffff\32\50\4\uffff\1\50\1\uffff\32\50",
 			""
 	};
 
 	static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
 	static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
 	static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
 	static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
 	static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
 	static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
 	static final short[][] DFA22_transition;
 
 	static {
 		int numStates = DFA22_transitionS.length;
 		DFA22_transition = new short[numStates][];
 		for (int i=0; i<numStates; i++) {
 			DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
 		}
 	}
 
 	protected class DFA22 extends DFA {
 
 		public DFA22(BaseRecognizer recognizer) {
 			this.recognizer = recognizer;
 			this.decisionNumber = 22;
 			this.eot = DFA22_eot;
 			this.eof = DFA22_eof;
 			this.min = DFA22_min;
 			this.max = DFA22_max;
 			this.accept = DFA22_accept;
 			this.special = DFA22_special;
 			this.transition = DFA22_transition;
 		}
 		@Override
 		public String getDescription() {
 			return "1:1: Tokens : ( EQ | GT | GE | LT | NEQ | AT | CL | CM | DOT | SC | LP | RP | LB | RB | LBR | RBR | ADD | SUB | STAR | DIV | MOD | NOT | AND | OR | XOR | AND_BIT | OR_BIT | VOID | BASIC_TYPE | ABSTRACT | ASSERT | BREAK | BYTE | CASE | CATCH | CLASS | CONTINUE | DEFAULT | DO | ELSE | ENUM | EXTENDS | FINAL | FINALLY | FOR | IF | IMPLEMENTS | IMPORT | INSTANCEOF | INTERFACE | NATIVE | NEW | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | STATIC | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRY | VOLATILE | WHILE | ID | INTEGER | FLOAT | COMMENT | WS | STRING | CHAR );";
 		}
 	}
 
 }

 